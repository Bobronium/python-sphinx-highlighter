# VS Code does not support YAML-based grammar definitions.
# This file must be converted into a JSON-based grammar. A
# corresponding VS Code build taks has been provided in the repository.
---
scopeName: python-sphinx.injection
injectionSelector: string.quoted.docstring.multi.python

# This is a special key that will be extracted by the Python utility
# "build-grammar.py".
# This uses the same compile time expression syntax as GitHub actions,
# so "${{ apple }}" would get replaced by the corresponding "apple" key
# defined in this mapping.
variables:
  alpha: "[a-zA-Z]"
  alphaNum: "[a-zA-Z0-9]"
  captureLeadingWhitespace: ^( *)
  matchLeadingWhitespace: ^\1(?=\S)
  tripleQuote: (\"\"\"|\'\'\')

# Top-level patterns to inject
patterns:
  - include: "#directives"
  - include: "#raw-blocks"
  - include: "#emphasis"
  - include: "#link-def"
  - include: "#interpreted-text-inline"
  - include: "#anonymous-link"
  - include: "#inline-literal"
  - include: "#link-reference"
  - include: "#link-trailing-underscore"
  - include: "#cross-references" # <- inserted
  - include: "#tag"
  - include: "#headings"
  # Non-standard, Google-style additions
  - include: "#google-style"

# Pattern definitions
repository:
  interpreted-text-inline:
    # Single-line interpreted text roles
    match: (`)[^`]+(`)(?!_)
    captures:
      "1": { name: punctuation.definition.interpreted.sphinx }
      "2": { name: punctuation.definition.interpreted.sphinx }
    name: markup.other.command.sphinx

  anonymous-link:
    # Anonymous links, created via two leading underscores,
    # e.g. "__ https://python.org/
    match: \s*(__)\s+(.+)
    captures:
      "1": { name: punctuation.definition.link.sphinx }
      "2": { name: markup.underline.link.sphinx }
    name: meta.link.sphinx

  interpreted-text-multiline:
    # An interpreted text block spanning multiple lines
    begin: (:)([-A-z0-9_.]*)(:)(`)
    beginCaptures:
      "1": { name: punctuation.definition.interpreted.sphinx }
      "2": { name: entity.name.role.sphinx }
      "3": { name: punctuation.definition.interpreted.sphinx }
      "4": { name: punctuation.definition.interpreted.sphinx }
    end: (`)
    endCaptures:
      "1": { name: punctuation.definition.interpreted.sphinx }
    contentName: string.other.interpreted.sphinx
    name: markup.other.command.sphinx

  link-trailing-underscore:
    # Links created with trailing underscores,
    # e.g. "`https://python.org`_"
    match: (`)([^<`]+)\s+(<)(.*?)(>)(`_)
    captures:
      "1": { name: punctuation.definition.link.sphinx }
      "2": { name: string.other.link.title.sphinx }
      "3": { name: punctuation.definition.location.sphinx }
      "4": { name: markup.underline.link.sphinx }
      "5": { name: punctuation.definition.location.sphinx }
      "6": { name: punctuation.definition.link.sphinx }
    name: meta.link.inline.sphinx

  inline-literal:
    # Inline literal text blocks
    begin: "``"
    end: "``((?=[^`\\w\\d])|$)"
    captures:
      "0": { name: punctuation.definition.raw.sphinx }
    name: markup.raw.sphinx

  directives:
    patterns:
      # I am not going to pretend that I reverse-engineered this one;
      # this is a carbon copy of what the default VS Code RST syntax
      # highlights and I am absolutely fine with that.
      - match: ^[ \t]*(\.\.)\s((\|)(.*)(\|)\s)?([A-z][-A-z0-9_]+)(::)((\s[Uu](\+)\d{4,5})?(\s[-A-z0-9_]+([(])[-A-z0-9_]*([)]))?(\s(\.\.)\s)?.*)?
        captures:
          "1": { name: punctuation.definition.directive.sphinx }
          "3": { name: punctuation.definition.substitution.sphinx }
          "4": { name: markup.underline.substitution.sphinx }
          "5": { name: punctuation.definition.substitution.sphinx }
          "6": { name: support.directive.sphinx }
          "7": { name: punctuation.separator.key-value.sphinx }
          "8": { name: entity.name.directive.sphinx }
          "10": { name: punctuation.definition.directive.sphinx }
          "12": { name: punctuation.definition.directive.sphinx }
          "13": { name: punctuation.definition.directive.sphinx }
          "15": { name: punctuation.definition.directive.sphinx }

  emphasis:
    # For coding with ~passion~ \o/
    patterns:
      # Boild text, for when you need to write with passion
      - match: (\*\*)[^*]+(\*\*)
        captures:
          "1": { name: punctuation.definition.bold.sphinx }
          "3": { name: punctuation.definition.bold.sphinx }
        name: markup.bold.sphinx
      # Italic text, for writing lies
      - match: (\*)[^*]+(\*)
        captures:
          "1": { name: punctuation.definition.italic.sphinx }
          "3": { name: punctuation.definition.italic.sphinx }
        name: markup.italic.sphinx

  headings:
    match: (^\s*(=|\-|~|`|#|\^|\+|\*|:|\.|_|\+){3,}$)
    captures:
      "1": { name: punctuation.definition.heading.sphinx }
    name: markup.heading.sphinx

  link-def:
    # Link definitions to be used elsewhere
    patterns:
      # Replacement type 1
      - match: (\.\.)\s+(_)([-.\d\w\s()]+)(:)\s+(.*)
        captures:
          "1": { name: punctuation.definition.link.sphinx }
          "2": { name: punctuation.definition.string.sphinx }
          "3": { name: string.other.link.title.sphinx }
          "4": { name: punctuation.separator.key-value.sphinx }
          "5": { name: markup.underline.link.sphinx }
        name: meta.link.reference.def.sphinx
      # Replacement type 2
      - match: (\.\.)\s+(_`)([^`]+)(`:)\s+(.*)
        captures:
          "1": { name: punctuation.definition.link.sphinx }
          "2": { name: punctuation.definition.string.sphinx }
          "3": { name: string.other.link.title.sphinx }
          "4": { name: punctuation.separator.key-value.sphinx }
          "5": { name: markup.underline.link.sphinx }
        name: meta.link.reference.def.sphinx

  link-reference:
    # Using link definitions elsewhere
    patterns:
      # Regular inline link definitions, e.g. "link_".
      - match: \`([-.:+_\d\w]+)\`(_)\b
        name: meta.link.reference
        captures:
          "1": { name: string.other.link.title.sphinx }
          "2": { name: punctuation.definition.link.sphinx }
      - begin: (`)
        beginCaptures:
          "1": { name: punctuation.definition.link.sphinx }
        end: (`_)
        endCaptures:
          "1": { name: punctuation.definition.link.sphinx }
        name: meta.link.reference
        patterns:
          - match: "[^`]+"
            name: string.other.link.title.sphinx

  raw-blocks:
    # An unformatted, literal block of text - which is not the same
    # thing as a code block, apparently
    begin: ${{ captureLeadingWhitespace }}.+(::)$
    beginCaptures:
      "1": { name: punctuation.section.raw.sphinx }
    end: ${{ matchLeadingWhitespace }}
    endCaptures:
      "1": { name: entity.name.type.sphinx }
    contentName: meta.raw.block.sphinx
    patterns:
      - include: "#raw-blocks-inner"

  raw-blocks-inner:
    # The inner part of a raw block to highlight *differently*
    match: .+
    name: meta.raw.inner.sphinx

  tag:
    # RST inline tags. These are mostly used for autodoc tags, i.e.
    # things like ":param key:" or ":rtype: str".
    match: (:)(${{alpha}}[${{alphaNum}} _\-\.]+${{alpha}})(:)
    name: entity.name.tag.sphinx

  cross-references:
    # Add support for colourful cross-references
    match: :(\w+):`([^`]+)`(?!_)
    captures:
      "1": { name: entity.name.role.sphinx }
      "2": { name: string.other.interpreted.sphinx }

  google-style:
    # Custom rules to apply for juicier Google-style docstrings
    patterns:
      - include: "#google-headings"
      - include: "#google-arguments"

  google-headings:
    # Google-style headings, i.e. single words ending in a single colon
    match: "^( *)(\\w+):$"
    name: markup.bold.heading.sphinx

  google-arguments:
    # Google-style arguments
    match: "^( +)(\\*{0,2}\\w+( \\(optional\\))?):(?= \\S)"
    captures:
      "2": { name: entity.name.type.sphinx }
